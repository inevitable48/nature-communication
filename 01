# 清除环境中的变量以避免混淆
rm(list = ls())
library(Seurat)
library(tidyverse)
library(ggsci)
library(clustree)
library(metap)
library(harmony)
library(patchwork)
library(MySeuratWrappers)
setwd("H:\\newbehcet\\newscrna\\HC+BD")

# 读入并创建多个Seurat对象，从不同的文件夹读取数据
folders <- paste0('../', list.files('../'))
folders <- folders[c(-9)]
scList = lapply(folders, function(folder) { 
  CreateSeuratObject(counts = Read10X(folder), 
                     project = folder,
                     min.cells = 3, 
                     min.features = 200)
})

# 整合不同样本的数据
dak <- SplitObject(scRNA, split.by = "orig.ident")
# 合并不同健康控制样本的数据
HC <- merge(scList[[5]], y = c(scList[[6]], scList[[7]], scList[[8]], scList[[13]], scList[[14]], scList[[15]], scList[[16]]),  
             add.cell.ids = c("moHC1", "moHC2", "moHC3", "moHC4", "HC5", "HC6", "HC7", "HC8"), 
             project = "HC")

# 合并疾病前期样本的数据
PRE <- merge(scList[[1]], y = c(scList[[2]], scList[[3]], scList[[4]], scList[[9]], scList[[10]], scList[[11]], scList[[12]], dak$preBD1, dak$preBD2, dak$preBD3), 
             add.cell.ids = c("moBD1", "moBD2", "moBD3", "moBD4", "BD5", "BD6", "BD7", "BD8", "BOD9", "BOD10", "BOD11"), 
             project = "PRE")

# 合并疾病后期样本的数据
POST <- merge(dak$postBD1, y = c(dak$postBD2, dak$postBD3), 
              add.cell.ids = c("BOD9POST", "BOD10POST", "BOD11POST"), 
              project = "POST")
# 对数据进行质控，筛选合格细胞
cat("Before filter:", nrow(HC@meta.data), "cells\n")
HC <- subset(HC, subset = nFeature_RNA > 500 & nFeature_RNA < 4000 & nCount_RNA > 1000 & nCount_RNA < 25000 & percent.mt < 10)
cat("After filter:", nrow(HC@meta.data), "cells\n")

# 重复对PRE和POST数据集执行相同的质控步骤
PRE <- subset(PRE, subset = nFeature_RNA > 500 & nFeature_RNA < 4000 & nCount_RNA > 1000 & nCount_RNA < 25000 & percent.mt < 10)
POST <- subset(POST, subset = nFeature_RNA > 500 & nFeature_RNA < 4000 & nCount_RNA > 1000 & nCount_RNA < 25000 & percent.mt < 10)
# 运行Harmony算法进行批次效应的校正
scedata <- RunHarmony(sampleList, c("orig.ident"), plot_convergence = TRUE)
scedata <- FindIntegrationAnchors(object.list = sampleList, dims = 1:20)
scedata <- IntegrateData(anchorset = scedata, dims = 1:20)

# 细胞周期打分和主成分分析
scedata <- CellCycleScoring(scedata, s.features = cc.genes$s.genes, g2m.features = cc.genes$g2m.genes, set.ident = TRUE)
scedata <- ScaleData(scedata, vars.to.regress = c("S.Score", "G2M.Score", 'nFeature_RNA', "percent.mt", "orig.ident"))
scedata <- RunPCA(scedata, npcs = 50)
scedata <- JackStraw(scedata, num.replicate = 100, dims = 50)
scedata <- ScoreJackStraw(scedata, dims = 1:50)
# 使用UMAP和t-SNE技术进行数据可视化
p1 <- DimPlot(scedata, group.by = "celltype.main", pt.size = 0.01, label = TRUE, reduction = 'umap', cols = allcolor, repel = TRUE)
p2 <- DimPlot(scedata, pt.size = 0.5, label = TRUE, reduction = 'tsne')
print(p1)
print(p2)
saveRDS(scedata, "scedata4HC4BD3.rds")

# 输出UMAP和t-SNE图表的文件
ggsave("UMAP_plot.pdf", plot = p1, width = 10, height = 8)
ggsave("tSNE_plot.pdf", plot = p2, width = 10, height = 8)




