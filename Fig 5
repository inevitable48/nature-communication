#Figure 5A 5B 5C 5D
##    2.1 运行AddModuleScore------------------------------------#######
scRNA_Ams = pbmc3k.final
genes_Ams = genes

# 提取scRNA_Ams包含的基因
genes_Ams = genes_Ams[genes_Ams%in%rownames(scRNA_Ams)]

# AddModuleScore使用的基因集对象需要提前转变为列表
genes_Ams = list(genes_Ams)

# 一句代码运行
scRNA_Ams <- AddModuleScore(scRNA_Ams,
                            features = genes_Ams,#转换成列表的基因集
                            name = 'Inflammation_score')
colnames(scRNA_Ams@meta.data)

colnames(scRNA_Ams@meta.data)[8] = "Inflammation_score"
Data = data.frame('cell_type'=scRNA_Ams$seurat_annotations,
                  'Score'=scRNA_Ams$Inflammation_score)

Data_summary = Data %>% 
  group_by(cell_type) %>% 
  summarise(across(.cols = Score,.fns = list(
  'mean' = mean, 'sd' =sd
))) %>% 
  dplyr::rename('mean' = Score_mean,
                'sd' = Score_sd)
Data = left_join(Data,Data_summary,by="cell_type")


ggplot(Data, aes(x=cell_type, y=Score,fill=cell_type)) + 
  geom_violin(trim=FALSE,color="white") + #绘制小提琴图
  geom_boxplot(width=0.2,position=position_dodge(0.9))+
  geom_point(aes(x=cell_type, y=mean),pch=19,position=position_dodge(0.9),size=1.5)+#绘制均值为点图
geom_errorbar(aes(ymin = mean-sd, ymax=mean+sd), #误差条表示95%的置信区间
                width=0.1, #误差条末端短横线的宽度
                position=position_dodge(0.9), 
                color="black",
                alpha = 0.7,
                size=0.5) +
  scale_fill_manual(values = ggsci::pal_aaas()(9))+ #设置填充的颜色
  theme_bw()+ #背景变为白色
  theme(axis.text.x=element_text(angle=45,hjust = 1,colour="black",family="Times",size=20), #设置x轴刻度标签的字体显示倾斜角度为15度，并向下调整1(hjust = 1)，字体簇为Times大小为20
        axis.text.y=element_text(family="Times",size=16,face="plain"), #设置y轴刻度标签的字体簇，字体大小，字体样式为plain
        axis.title.y=element_text(family="Times",size = 20,face="plain"), #设置y轴标题的字体属性
        panel.border = element_blank(),axis.line = element_line(colour = "black",size=1), #去除默认填充的灰色，并将x=0轴和y=0轴加粗显示(size=1)
        legend.text=element_text(face="italic", family="Times", colour="black",  #设置图例的子标题的字体属性
                                 size=8),
        legend.title=element_text(face="italic", family="Times", colour="black", #设置图例的总标题的字体属性
                                  size=18),
        panel.grid.major = element_blank(),   #不显示网格线
        panel.grid.minor = element_blank())+  #不显示网格线
  ylab("")+xlab("") #设置x轴和y轴的标题

scRNA_Aucell = pbmc3k.final
genes_Aucell = genes

# 提取genes_Aucell包含的基因
genes_Aucell = genes_Aucell[genes_Aucell%in%rownames(scRNA_Aucell)]


library(AUCell)
cells_rankings <- AUCell_buildRankings(scRNA_Aucell@assays$RNA@counts,nCores=1, plotStats=TRUE,splitByBlocks=TRUE)##基因排序
cells_AUC <- AUCell_calcAUC(genes_Aucell, cells_rankings, aucMaxRank=nrow(cells_rankings)*0.05) ##计算AUC值。
cells_assignment <- AUCell_exploreThresholds(cells_AUC, plotHist=TRUE, nCores=1,assign=TRUE)##挑选阈值
aucs <- getAUC(cells_AUC)
scRNA_Aucell$AUC <- aucs[1,]
df<- data.frame(scRNA_Aucell@meta.data, scRNA_Aucell@reductions[["umap"]]@cell.embeddings)

# UMAP
class_avg <- df %>%
  dplyr::group_by(seurat_annotations) %>%
  dplyr::summarise(
    UMAP_1 = median(UMAP_1),
    UMAP_2 = median(UMAP_2)
  )
ggplot(df, aes(UMAP_1, UMAP_2))  +
  geom_point(aes(colour  = AUC)) + viridis::scale_color_viridis(option="H") +
  ggrepel::geom_text_repel(aes(label = seurat_annotations),
                           data = class_avg,
                           size = 6,
                           segment.color = NA) +   
  theme(legend.position = "none") + theme_classic()


#Figure E-G
library(monocle3)
Idents(scedata$)

data <- GetAssayData(scedata, assay = "RNA", slot ="counts")
cell_metadata <- scedata@meta.data
gene_annotation <- data.frame(gene_short_name = rownames(data))
rownames(gene_annotation) <- rownames(data)
cds <- new_cell_data_set(data,
                         cell_metadata = cell_metadata,
                         gene_metadata = gene_annotation)

cds <- preprocess_cds(cds,num_dim = 50)
plot_pc_variance_explained(cds)

cds<- reduce_dimension(cds,preprocess_method = "PCA")
plot_cells(cds)


# 细胞聚类
cds <- cluster_cells(cds)
colnames(colData(cds))

p1<- plot_cells(cds,reduction_method = "UMAP",color_cells_by = "Tcelltype") + ggtitle("cds.map")

cds.embed <- cds@int_colData$reducedDims$UMAP
int.embed <- Embeddings(scedata, reduction = "umap")
int.embed <- int.embed[rownames(cds.embed),]
cds@int_colData$reducedDims$UMAP <- int.embed
p2 <- plot_cells(cds,reduction_method = "UMAP",color_cells_by = "Tcelltype")  + ggtitle("int.umap")           

p1|p2

cds<- reduce_dimension(cds,reduction_method = "UMAP")
cds <- reduce_dimension(cds)

cds <- learn_graph(cds)

p = plot_cells(cds,color_cells_by = "Tcelltype",label_groups_by_cluster = F,label_leaves = FALSE,label_branch_points=FALSE)



library(monocle)

scRNA <- readRDS("H:\\newbehcet\\newscrna\\HC+BD\\T细胞\\TcellfilterCD4ribosome-related.rds")

scedataT <- SplitObject(scRNA,split.by = "Tcelltypemain")
table(scedataT$CD4$Tcelltype)
pbmc<- scedataT$CD4


pbmc<- scedataT
#Extract data, phenotype data, and feature data from the SeuratObject
data <- as(as.matrix(pbmc@assays$RNA@counts), 'sparseMatrix')
pd <- new('AnnotatedDataFrame', data = pbmc@meta.data)
fData <- data.frame(gene_short_name = row.names(data), row.names = row.names(data))
fd <- new('AnnotatedDataFrame', data = fData)

#构建S4对象，CellDataSet
HSMM <- newCellDataSet(data,
                       phenoData = pd,
                       featureData = fd,
                       lowerDetectionLimit = 0.5,
                       expressionFamily = negbinomial.size())

HSMM <- estimateSizeFactors(HSMM)
HSMM <- estimateDispersions(HSMM)

HSMM <- detectGenes(HSMM, min_expr = 0.1 )
print(head(fData(HSMM)))

expressed_genes <- row.names(subset(fData(HSMM),
                                    num_cells_expressed >= 10))

head(pData(HSMM))

diff_test_res <- differentialGeneTest(HSMM[expressed_genes,],
                                      fullModelFormulaStr = "~ Tcelltype")

ordering_genes <- row.names (subset(diff_test_res, qval < 0.05)) ## 不要也写0.1 ，而是要写0.01。

HSMM <- setOrderingFilter(HSMM, ordering_genes)
plot_ordering_genes(HSMM)
HSMM <- reduceDimension(HSMM, max_components = 3,
                        num_dim = 20,
                        method = 'DDRTree') # DDRTree方式



HSMM <- orderCells(HSMM)


allcolour<-c("#0000FF","#20B2AA","#FFA500","#9370DB","#98FB98" ,"#8A2BE2"      ,"#1E90FF","#7CFC00","#FFFF00",
            "#DC143C","#FF00FF","#FA8072","#7B68EE","#800080","#A0522D","#D2B48C","#D2691E","#87CEEB","#40E0D0","#5F9EA0",
            "#FF1493","#0000CD","#008B8B","#FFE4B5","#9400D3","#F08080","#228B22","#E9967A","#4682B4","#32CD32","#F0E68C","#FFFFE0","#EE82EE","#FF6347","#6A5ACD","#9932CC","#8B008B","#8B4513","#DEB887")


allcolour=c("#DC143C","#0000FF","#20B2AA","#FFA500","#9370DB","#98FB98","#F08080","#1E90FF","#7CFC00","#FFFF00",  
         "#808000","#FF00FF","#FA8072","#7B68EE","#9400D3","#800080","#A0522D","#D2B48C","#D2691E","#87CEEB","#40E0D0","#5F9EA0",
         "#FF1493","#0000CD","#008B8B","#FFE4B5","#8A2BE2","#228B22","#E9967A","#4682B4","#32CD32","#F0E68C","#FFFFE0","#EE82EE",
         "#FF6347","#6A5ACD","#9932CC","#8B008B","#8B4513","#DEB887")

a1 <- plot_cell_trajectory(HSMM, color_by = "Tcelltype") + scale_color_manual(values = colour)

a2 <- plot_cell_trajectory(HSMM, color_by = "State") + scale_color_manual(values = colour)

a3 <- plot_cell_trajectory(HSMM, color_by = "Pseudotime") 

a4 <- plot_cell_trajectory(HSMM, color_by = "labels")  + scale_color_manual(values = colour)

(a1 + a2) / (a3 + a4)
scedataT <- scRNA

BiocManager::install("slingshot")
library(slingshot)
library(SingleCellExperiment)
cd4_sce2 = scedataT$CD4[, !Idents(scedataT$CD4) %in% c( "Proliferation T cell" )]
cd4_sce2$Tcelltype
ed<-cd4$HC
cd4_ed = ed[, !Idents(ed) %in% c( "Proliferation T cell" )]


  table(cd4_sce2$Tcelltype)
cd4_sce2$splitgroup<- cd4_sce2@meta.data$group %>% str_replace("oB","HC") %>% str_replace("pB","HC")



table(cd4_sce2@meta.data$group)
cd4 <- SplitObject(cd4_sce2,split.by = "splitgroup")


sim <- as.SingleCellExperiment(cd4_sce2)
sce <- slingshot(sim, clusterLabels = "Tcelltype", reducedDim = "UMAP", start.clus= 1)


plot(reducedDims(sce)$UMAP, col = allcolour[sce$Tcelltype], pch=20, asp = 1)
lines(SlingshotDataSet(sce), lwd=2, col='black')
lines(SlingshotDataSet(sce), lwd=2, type = 'lineages', col = 'black')
summary(sce$slingPseudotime_3)
setwd("H:\\newbehcet\\newscrna\\HC+BD\\T细胞")
saveRDS(sce,"tradeslighshot.Rds")
scRNA<- readRDS("TcellfilterCD4ribosome-related.rds")
BiocManager::install("tradeSeq")
saveRDS

library(sampling)
df=data.frame(x=c(1,2,2,3,3,4),api=c('index','index','logout','show','show','index'))
cd4_sce2

table(cd4_sce2@meta.data$Tcelltype)

cd4_sce2@meta.data$Tcelltype<- as.factor(as.character(cd4_sce2@meta.data$Tcelltype))


sub2= strata(cd4_sce2@meta.data,stratanames='Tcelltype',size=c(rep(500,10)), method='srswor',description=T)
sds<-cd4_sce2[,sub2$ID_unit]
dim(sds)
sds@assays

library(tradeSeq)

### Based on Slingshot object
set.seed(6)
icMat <- evaluateK(counts = sce, sds = sim, k = 3:7, nGenes = 100,
                   verbose = FALSE, plot = TRUE)
print(icMat[1:2, ])



# fit negative binomial GAM
sim <- fitGAM(scRNA)

# test for dynamic expression
ATres <- associationTest(sim)


as.vector(as.data.frame(table(scRNA$Tcelltype))[,1])[-12]
table(scRNA$groupS)

scRNA$groupS <- str_replace(scRNA$group, "pB", "BD")

library(Scillus)
Idents(scRNA) 
DEG <- find_diff_genes(dataset = scedataT$CD4, 
                       clusters = c(as.vector(as.data.frame(table(scedataT$CD4$Tcelltype))[,1][str_detect(as.data.frame(table(scedataT$CD4$Tcelltype))[,1],"CD4")])[-9]),
                       comparison = c("group", "oB", "BD"),
                       logfc.threshold = 0,   # threshold of 0 is used for GSEA
                       min.cells.group = 1)   # To include clusters with only 1 cell
test_GSEA
gsea_res <- test_GSEA(DEG,pathway = pathways.hallmark)
plot_GSEA(gsea_res, p_cutoff = 0.1, colors = c("#0570b0", "grey", "#d7301f"))+ theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot_GSEA
gsea_res$padj

dsak <- gsea_res %>% filter(.data$padj <= 0.1) %>% mutate(pathway = str_remove(string = .data$pathway, pattern = pattern))   %>% mutate(color = -log10(.data$padj) * sign(.data$NES))


sce<- readRDS("tradeslighshot.Rds")
BiocManager::install("tradeSeq")
library(tradeSeq)

library(BiocParallel)
plan("multiprocess", workers = 1)
BPPARAM <- BiocParallel::bpparam()
BPPARAM$workers <- 2


library(tradeSeq)
library(BiocParallel)
BPPARAM <- BiocParallel::bpparam()
BPPARAM$workers <- 1
sim <- fitGAM(counts = sce,
              parallel = TRUE,
              BPPARAM = BPPARAM,
              nknots = 6)     # fit negative binomial GAM

dds<- scRNA@meta.data %>% select(.,seurat_clusters,Tcelltype) 
dds$Tcelltype
scRNA@meta.data$Tcelltype<- as.character(scRNA@meta.data$Tcelltype)
scRNA<- cd4_sce2
scRNA@meta.data[scRNA@meta.data$seurat_clusters %in% c(3),"Tcelltype"] <- "CD4 Tfh"
scRNA@meta.data$Tcelltype <- as.character(scRNA@meta.data$Tcelltype)
scRNA@meta.data$Tcelltype <- as.factor(scRNA@meta.data$Tcelltype)


table(as.factor(scRNA@meta.data$Tcelltype))
saveRDS(scRNA,"TcellfilterCD4ribosome-relatedtfhplus.rds")
scRNA$Tcelltype
CD4<-readRDS("TcellfilterCD4ribosome-related.rds")
table(Idents(CD4))

sce.markers <- FindAllMarkers(object = scedataT$CD4, only.pos = TRUE, 
                              min.pct = 0.1, 
                              thresh.use = 0.1)

table(scedataT$CD4$Tcelltype)
scedataT$CD4$Tcelltype<-as.factor(as.character(scedataT$CD4$Tcelltype))
Idents(scedataT$CD4)<-scedataT$CD4@meta.data$Tcelltype
test_GSEA
sce.markers<- sce.markers %>% mutate(feature = rownames(sce.markers))

gsea_res <- test_GSEA(sce.markers,pathway = pathways.hallmark)
plot_GSEA(gsea_res, p_cutoff = 0.1, colors = c("#0570b0", "grey", "#d7301f"))+ theme(axis.text.x = element_text(angle = 45, hjust = 1))
plot_GSEA
gsea_res$padj

library(clusterProfiler)
library(org.Hs.eg.db)
ids=bitr(sce.markers$gene,'SYMBOL','ENTREZID','org.Hs.eg.db') ## 将SYMBOL转成ENTREZID
sce.markers=merge(sce.markers,ids,by.x='gene',by.y='SYMBOL')
View(sce.markers)

## 函数split()可以按照分组因子，把向量，矩阵和数据框进行适当的分组。
## 它的返回值是一个列表，代表分组变量每个水平的观测。
gcSample=split(sce.markers$ENTREZID, sce.markers$cluster) 
## KEGG
xx <- compareCluster(gcSample,
                     fun = "enrichKEGG",
                     organism = "hsa", pvalueCutoff = 0.05)
p <- dotplot(xx)
p + theme(axis.text.x = element_text(
  angle = 45,
  vjust = 0.5, hjust = 0.5
))

scRNA$celltype <- Idents(scRNA)
table(scRNA$celltypemain)
scRNA$celltypemain<- as.character(scRNA$celltype)


scRNA$celltypemain[str_detect(scRNA$celltypemain,"Mono$")] <- "Monocyte"
scRNA$celltypemain[str_detect(scRNA$celltypemain,"cDC")] <- "Monocyte"



scRNA$celltypemain[str_detect(scRNA$celltypemain,"^B")] <- "B cell"
scRNA$celltypemain[str_detect(scRNA$celltypemain,"T$")] <- "T cell"
scRNA$celltypemain[str_detect(scRNA$celltypemain,"NK$")] <- "NK cell"
scRNA$celltypemain[str_detect(scRNA$celltypemain,"DC$")] <- "DC cell"
scRNA$celltypemain[str_detect(scRNA$celltypemain,"Plasma cell")] <- "B cell"
scRNA$group3 <- str_replace(scRNA$group,"BD","aBD")
scRNA$group3 <- str_replace(scRNA$group3,"pB","aBD")
scRNA$group3 <- str_replace(scRNA$group3,"oB","postBD")
scRNA$group3 <- factor(as.character(scRNA$group3),c("HC","aBD","postBD"))

scedataT <- SplitObject(scRNA,split.by = "celltypemain")

table(scRNA$celltypemain)
table(scedataT$`T cell`$celltype, scedataT$`T cell`$group3)#各样本不同细胞群细胞数
Cellratio <- prop.table(table(scedataT$`T cell`$celltype, scedataT$`T cell`$group3), margin = 2)#计算各组样本不同细胞群比例
Cellratio <- as.data.frame(Cellratio)
colnames(Cellratio) <- c("celltype","sample","ratio") #对列名重命名
Cellratio$sample <- factor(Cellratio$sample,levels = c("HC","aBD",'postBD'))  #调整画图的x轴坐标顺序
Cellratio<- filter(Cellratio,ratio>0)



library(ggplot2)
library(ggalluvial)
p<-ggplot(Cellratio,aes(x=sample,y=ratio,fill=celltype,stratum=celltype,alluvium=celltype))+
  geom_col(width = 0.4,color=NA)+
  geom_flow(width=0.4,alpha=0.2,knot.pos=0)+ # knot.pos参数可以使连线变直
  scale_fill_manual(values=allcolor)+
  theme_classic()+
  theme(panel.border = element_rect(fill=NA,color="black", size=0.5, linetype="solid"))+
  theme(legend.position = 'top') #取消图例展示
p
ggsave(plot = p,"celltype_ratio.pdf",width = 10,height = 8)

CD4 <- readRDS("T细胞/TcellfilterCD4ribosome-relatedtfhplus.rds")
metadata <- FetchData(CD4, "Tcelltype")

metadata$cell_id <- rownames(metadata)
metadata$sample_id <- metadata$Tcelltype
### dplyr中的left_join合并
metadata <- left_join(x = metadata, y = metatable, by = "sample_id")
### 重新加行名
rownames(metadata) <- metadata$cell_id

### 通过AddMetaData直接补入15列
seu_obj <- AddMetaData(scRNA, metadata = metadata)
seu_obj$TcelltypeC <- paste(seu_obj$Tcelltype, seu_obj$celltype,sep = "") 
seu_obj$TcelltypeC <- seu_obj$TcelltypeC[!str_detect(seu_obj$TcelltypeC,"^NACD..T")]

seu_obj$TcelltypeC <- seu_obj$TcelltypeC %>% str_replace_all(.,"^NA","")
seu_obj$TcelltypeC <- seu_obj$TcelltypeC %>% str_replace_all(.,"CD..T$","")
seu_obji$TcelltypeC <- seu_obji$TcelltypeC %>% str_replace_all(.,"CD4. Proliferating T$","")
table(seu_obj$TcelltypeC)
table(-str_detect(seu_obj$TcelltypeC,"NACD4.T"))
seu_obji <- seu_obj[,!str_detect(seu_obj$TcelltypeC,"^NA$")]
table(seu_obji$TcelltypeC)
seu_obji$TcelltypeC <- seu_obji$TcelltypeC %>% str_replace_all(.,"^NA","")
#Figure 5H
#!/usr/bin/env Rscript
setwd('~/lesson_3-4/Scripts')
options(warn = -1) # hidden warning

suppressPackageStartupMessages({
  library(SingleCellExperiment)
  library(AUCell)
  library(Seurat)
  library(SCopeLoomR)
  library(SCENIC)
  library(GENIE3)
  library(RcisTarget)
  library(foreach)
  library(ComplexHeatmap)
  library(ggplot2)
  library(ggrepel)
  }
)
print(Sys.time())

################################################
#########     ways to import data      #########
################################################

## from '.loom' file
#library(SCopeLoomR)
#loomPath <- "path/to/your/loomfile"
#loom <- open_loom(loomPath, mode="r+")
#exprMat <- get_dgem(loom)
#cellInfo <- get_cell_annotation(loom)
#close_loom(loom)

## from SeuratObject
#exprMat <- counts(sce)
#cellInfo <- seurat.obj@meta.data

## from SingleCellExperiment
#exprMat <- GetAssayData(seurat.obj, slot='counts')
#cellInfo <- colData(sce)





##自己数据
## from SeuratObject
#exprMat <- counts(sce)
#cellInfo <- seurat.obj@meta.data
load('../../ept_data_for_inferCNV.Rdata')
sce<-epi_data_harmony[,epi_data_harmony@meta.data$celltype%in%c('AT2')]
cellInfo<-sce@meta.data[,colnames(sce@meta.data) %in% c('orig.ident','nCount_RNA','nFeature_RNA','celltype')]
################################################
#########   Standard SCNEIC WORKFLOW   #########
################################################

##########################
# SCENIC Initialization
##########################
OutDir <- './rSCENIC_res'
#Prefix <- 'mouseBrain'
Prefix <- 'human_LUAD'
Org <- 'hgnc'#人：hgnc 小鼠mgi
myDatasetTitle <- "Example SCENIC R Workflow" 
#dbDir <- "/home/data/refdir/lesson_3-4/SCENIC_RESOURCES/mgi_v1"
dbDir <- "~/cisTarget_databases/cisTarget_databases/cisTarget_databases/"

#dbs <- c('500bp'='mm10__refseq-r80__500bp_up_and_100bp_down_tss.mc9nr.feather',
#         '10kb'='mm10__refseq-r80__10kb_up_and_down_tss.mc9nr.feather')
dbs <- c('500bp'='mm10__refseq-r80__500bp_up_and_100bp_down_tss.mc9nr.feather',
         '10kb'='mm10__refseq-r80__10kb_up_and_down_tss.mc9nr.feather')


if(!dir.exists(OutDir)) dir.create(OutDir)
setwd(OutDir)

###################################################
# NOTE:
#   if raise error:
#       object 'motifAnnotations_mgi' not found
#   then load motif annotation data from RcisTarget
#data('motifAnnotations_mgi',  package="RcisTarget")
data('motifAnnotations_hgnc',  package="RcisTarget")#人类的数据
motifAnnotations_hgnc <- motifAnnotations
###################################################

#scenicOptions <- initializeScenic(org=Org, dbDir=dbDir, dbs=dbs, datasetTitle=myDatasetTitle, nCores=1) 
scenicOptions <- initializeScenic(org=Org, dbDir=dbDir, datasetTitle=myDatasetTitle, nCores=1) 


# loading data
# loomPath <- '/home/data/refdir/lesson_3-4/mouseBrain_toy.loom'
# loom <- open_loom(loomPath)
# exprMat <- get_dgem(loom)
# cellInfo <- as.data.frame(get_cell_annotation(loom))
# saveRDS(cellInfo, file="int/cellInfo.Rds")
# close_loom(loom)
exprMat <- as.matrix(sce@assays$RNA@counts)
cellInfo <- sce@meta.data
# GENIE3
genesKept <- geneFiltering(exprMat, scenicOptions=scenicOptions)
exprMat_filtered <- exprMat[genesKept, ]
runCorrelation(exprMat_filtered, scenicOptions)
exprMat_filtered <- log2(exprMat_filtered+1)
runGenie3(exprMat_filtered, scenicOptions)#最大限速步骤

# SCENIC steps
scenicOptions@settings$dbs <- scenicOptions@settings$dbs["10kb"] # just for accelerate,实际跑的时候不需要
scenicOptions <- runSCENIC_1_coexNetwork2modules(scenicOptions)
scenicOptions <- runSCENIC_2_createRegulons(scenicOptions, coexMethod=c("top5perTarget"))#实际跑的时候不需要coexMethod这个参数
scenicOptions <- runSCENIC_3_scoreCells(scenicOptions, log2(exprMat+1))
scenicOptions <- runSCENIC_4_aucell_binarize(scenicOptions)
saveRDS(scenicOptions, file="int/scenicOptions.Rds")

######################################
# Regulators for known cell types or clusters
######################################
regulonAUC <- loadInt(scenicOptions, "aucell_regulonAUC")
regulonAUC <- regulonAUC[onlyNonDuplicatedExtended(rownames(regulonAUC)),]
regulonActivity_byCellType <- sapply(split(rownames(cellInfo), cellInfo$orig.ident),
                                     function(cells) rowMeans(getAUC(regulonAUC)[,cells]))
regulonActivity_byCellType_Scaled <- t(scale(t(regulonActivity_byCellType), center = T, scale=T))
pdf(file.path(res_dir, paste0(Prefix, '_Average_Regulon_Activity_byCelltype.pdf')), width = 8, height = 6)
ComplexHeatmap::Heatmap(regulonActivity_byCellType_Scaled, name="Regulon activity")
dev.off()

